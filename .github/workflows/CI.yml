name: CI
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  schedule:
    - cron:  '0 3 * * *'

jobs:
  CI:
    continue-on-error: ${{ matrix.kokkos_ver == 'develop' }}
    strategy:
      matrix:
        distro: ['ubuntu:latest']
        cxx: ['g++', 'clang++']
        openmp: ['ON', 'OFF']
        cmake_build_type: ['Debug', 'Release']
        kokkos_ver: ['3.2.01', 'master', 'develop']
    runs-on: ubuntu-20.04
    container: ghcr.io/ecp-copa/ci-containers/${{ matrix.distro }}
    steps:
      - name: Get trail license
        if: ${{ matrix.cxx == 'icpc' }}
        run: |
          mkdir ~/Licenses
          curl https://dynamicinstaller.intel.com/api/v2/license > ~/Licenses/intel.lic
      - name: Checkout kokkos
        uses: actions/checkout@v2.2.0
        with:
          repository: kokkos/kokkos
          ref: ${{ matrix.kokkos_ver }}
          path: kokkos
      - name: Build kokkos
        working-directory: kokkos
        run: |
          cmake -B build \
            -DCMAKE_INSTALL_PREFIX=$HOME/kokkos \
            -DKokkos_ENABLE_OPENMP=${{ matrix.openmp }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.cxx }} \
            -DKokkos_ENABLE_HWLOC=ON \
            -DCMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }}
          cmake --build build --parallel 2
          cmake --install build
      - name: Checkout kokkos-kernels
        uses: actions/checkout@v2.2.0
        with:
          repository: kokkos/kokkos-kernels
          ref: master
          path: kokkos-kernels
      - name: Build kokkos-kernels
        working-directory: kokkos-kernels
        run: |
          cmake -B build \
            -DCMAKE_PREFIX_PATH=${HOME}/kokkos \
            -DCMAKE_INSTALL_PREFIX=$HOME/kokkos-kernels \
            -DCMAKE_CXX_COMPILER=${{ matrix.cxx }} \
            -DCMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }}
          cmake --build build --parallel 2
          cmake --install build
      - name: Checkout arborx
        uses: actions/checkout@v2.2.0
        with:
          repository: arborx/ArborX
          ref: master
          path: arborx
      - name: Build arborx
        working-directory: arborx
        run: |
          cmake -B build \
            -DCMAKE_PREFIX_PATH=${HOME}/kokkos \
            -DCMAKE_INSTALL_PREFIX=$HOME/arborx \
            -DCMAKE_CXX_COMPILER=${{ matrix.cxx }} \
            -DCMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }}
          cmake --build build --parallel 2
          cmake --install build
      - name: Checkout Cabana
        uses: actions/checkout@v2.2.0
        with:
          repository: ECP-CoPA/Cabana
          ref: master
          path: cabana
      - name: Build Cabana
        working-directory: cabana
        run: |
          cmake -B build \
            -DCMAKE_INSTALL_PREFIX=$HOME/cabana \
            -DCMAKE_PREFIX_PATH=$HOME/kokkos \
            -DCMAKE_CXX_COMPILER=${{ matrix.cxx }} \
            -DCMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }}
          cmake --build build --parallel 2
          cmake --install build
      - name: Get Boost
        run: |
             wget --quiet https://dl.bintray.com/boostorg/release/1.67.0/source/boost_1_67_0.tar.bz2 \
                  --output-document=boost.tar.bz2
             mkdir boost
             tar -xf boost.tar.bz2 -C boost --strip-components=1
      - name: Build Boost
        working-directory: boost
        run: |
             ./bootstrap.sh --prefix=$HOME/boost
             ./b2 \
             hardcode-dll-paths=true dll-path=$HOME/boost/lib \
             link=shared variant=release cxxflags=-w \
             install
      - name: Get Silo
        if: ${{ matrix.distro == 'ubuntu:latest' }}
        run: |
             wget --quiet https://wci.llnl.gov/sites/wci/files/2021-01/silo-4.10.2-bsd-smalltest.tgz \
                  --output-document=silo.tgz
             mkdir silo
             tar -xf silo.tgz -C silo --strip-components=1
      - name: Build Silo
        if: ${{ matrix.distro == 'ubuntu:latest' }}
        working-directory: silo
        run: |
             ./configure CC=mpicc CXX=mpicxx --enable-fortran=no --prefix=$HOME/silo
             make install
      - name: Checkout Picasso
        uses: actions/checkout@v2.2.0
      - name: Build Picasso
        run: |
          cmake -B build \
            -DCMAKE_INSTALL_PREFIX=$HOME/picasso \
            -DMPIEXEC_MAX_NUMPROCS=2 -DMPIEXEC_PREFLAGS="--oversubscribe" \
            -DCMAKE_PREFIX_PATH="$HOME/kokkos;$HOME/kokkos-kernels;$HOME/arborx;$HOME/cabana;$HOME/boost;$HOME/silo" \
            -DCMAKE_CXX_COMPILER=${{ matrix.cxx }} \
            -DCMAKE_CXX_FLAGS="-Wall -pedantic --coverage" \
            -DPicasso_ENABLE_TESTING=ON \
            -DCMAKE_EXE_LINKER_FLAGS='--coverage' \
            -DCMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }}
          cmake --build build --parallel 2
          CTEST_OUTPUT_ON_FAILURE=1 cmake --build build --target test
          cmake --install build
      - name: Format Picasso
        if: ${{ matrix.distro == 'ubuntu:latest' }}
        working-directory: build
        run: |
             make format
             git diff --exit-code
      - name: Upload Report to codecov.io
        uses: codecov/codecov-action@v1
